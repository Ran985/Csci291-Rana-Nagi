#include <webots/robot.h>
#include <webots/distance_sensor.h>
#include <webots/light_sensor.h>
#include <webots/motor.h>

#define TIME_STEP 64
#define MAX_LIGHT_INTENSITY 4096 // maximum light intensity value for e-puck

// Function prototypes
void initialize_sensors(WbDeviceTag* left_distance_sensor, WbDeviceTag* right_distance_sensor, WbDeviceTag* light_sensor);
void move_forward(WbDeviceTag left_motor, WbDeviceTag right_motor, double speed);
void turn_left(WbDeviceTag left_motor, WbDeviceTag right_motor, double speed);
void turn_right(WbDeviceTag left_motor, WbDeviceTag right_motor, double speed);

int main() {
  wb_robot_init(); // Initialize the Webots API
  
  // Set up motors
  WbDeviceTag left_motor = wb_robot_get_device("left wheel motor");
  WbDeviceTag right_motor = wb_robot_get_device("right wheel motor");
  wb_motor_set_position(left_motor, INFINITY);
  wb_motor_set_position(right_motor, INFINITY);

  // Initialize sensors
  WbDeviceTag left_distance_sensor, right_distance_sensor, light_sensor;
  initialize_sensors(&left_distance_sensor, &right_distance_sensor, &light_sensor);
  
  double highest_light_value = 0;
  double highest_light_position[2] = {0, 0}; // placeholder for light position

  // Main control loop
  while (wb_robot_step(TIME_STEP) != -1) {
    // Read sensor values
    double left_distance = wb_distance_sensor_get_value(left_distance_sensor);
    double right_distance = wb_distance_sensor_get_value(right_distance_sensor);
    double light_intensity = wb_light_sensor_get_value(light_sensor);
    
    // Update highest light intensity and position if new maximum found
    if (light_intensity > highest_light_value) {
      highest_light_value = light_intensity;
      // Replace with actual coordinates or position-tracking logic
      highest_light_position[0] = wb_robot_get_time();  // Placeholder
      highest_light_position[1] = wb_robot_get_time();  // Placeholder
    }
    
    // Wall-following logic
    if (left_distance < 100.0 && right_distance < 100.0) {
      move_forward(left_motor, right_motor, 6.0); // Move forward if no wall in front
    } else if (left_distance > right_distance) {
      turn_right(left_motor, right_motor, 4.0);    // Turn right if obstacle on left
    } else {
      turn_left(left_motor, right_motor, 4.0);     // Turn left if obstacle on right
    }
    
    // Add more conditions for dead-end detection, recording position, etc.
  }

  wb_robot_cleanup(); // Cleanup Webots API
  return 0;
}

// Function to initialize sensors
void initialize_sensors(WbDeviceTag* left_distance_sensor, WbDeviceTag* right_distance_sensor, WbDeviceTag* light_sensor) {
  *left_distance_sensor = wb_robot_get_device("ps0"); // Proximity sensor 0
  *right_distance_sensor = wb_robot_get_device("ps7"); // Proximity sensor 7
  *light_sensor = wb_robot_get_device("ls0"); // Light sensor
  
  wb_distance_sensor_enable(*left_distance_sensor, TIME_STEP);
  wb_distance_sensor_enable(*right_distance_sensor, TIME_STEP);
  wb_light_sensor_enable(*light_sensor, TIME_STEP);
}

// Function to move the robot forward
void move_forward(WbDeviceTag left_motor, WbDeviceTag right_motor, double speed) {
  wb_motor_set_velocity(left_motor, speed);
  wb_motor_set_velocity(right_motor, speed);
}

// Function to turn the robot left
void turn_left(WbDeviceTag left_motor, WbDeviceTag right_motor, double speed) {
  wb_motor_set_velocity(left_motor, -speed);
  wb_motor_set_velocity(right_motor, speed);
}

// Function to turn the robot right
void turn_right(WbDeviceTag left_motor, WbDeviceTag right_motor, double speed) {
  wb_motor_set_velocity(left_motor, speed);
  wb_motor_set_velocity(right_motor, -speed);
}
