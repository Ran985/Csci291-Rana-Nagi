#include <webots/robot.h>
#include <webots/distance_sensor.h>
#include <webots/motor.h>
#include <stdio.h>  // Required for sprintf

#define TIME_STEP 64
#define SPEED 4.0
#define NUM_PROXIMITY_SENSORS 8  // e-puck has 8 proximity sensors
#define WALL_THRESHOLD 80.0      // Threshold for detecting walls
#define WALL_FOLLOW_DISTANCE 50.0 // Desired distance from the wall

// Function prototypes
void initialize_sensors(WbDeviceTag* distance_sensors);
void move_forward(WbDeviceTag left_motor, WbDeviceTag right_motor);
void turn_left(WbDeviceTag left_motor, WbDeviceTag right_motor, double factor);
void turn_right(WbDeviceTag left_motor, WbDeviceTag right_motor, double factor);

int main() {
  wb_robot_init(); // Initialize the Webots API

  // Set up motors
  WbDeviceTag left_motor = wb_robot_get_device("left wheel motor");
  WbDeviceTag right_motor = wb_robot_get_device("right wheel motor");
  wb_motor_set_position(left_motor, INFINITY);
  wb_motor_set_position(right_motor, INFINITY);
  wb_motor_set_velocity(left_motor, 0.0);
  wb_motor_set_velocity(right_motor, 0.0);

  // Initialize sensors
  WbDeviceTag distance_sensors[NUM_PROXIMITY_SENSORS];
  initialize_sensors(distance_sensors);

  // Main control loop
  while (wb_robot_step(TIME_STEP) != -1) {
    // Read proximity sensor values
    double left_distance = wb_distance_sensor_get_value(distance_sensors[0]);
    double front_left_distance = wb_distance_sensor_get_value(distance_sensors[1]);
    double front_distance = wb_distance_sensor_get_value(distance_sensors[2]);
    double front_right_distance = wb_distance_sensor_get_value(distance_sensors[3]);
    double right_distance = wb_distance_sensor_get_value(distance_sensors[7]);

    // Wall-following and obstacle-avoidance logic
    if (front_distance < WALL_THRESHOLD || front_left_distance < WALL_THRESHOLD || front_right_distance < WALL_THRESHOLD) {
      // Obstacle ahead or diagonally in front
      if (left_distance < WALL_THRESHOLD) {
        turn_right(left_motor, right_motor, 1.0);  // Wall on the left
      } else if (right_distance < WALL_THRESHOLD) {
        turn_left(left_motor, right_motor, 1.0);  // Wall on the right
      } else {
        turn_left(left_motor, right_motor, 1.0);  // Default to left turn
      }
    } else if (left_distance < WALL_FOLLOW_DISTANCE) {
      // Too close to the left wall, steer slightly right
      turn_right(left_motor, right_motor, 0.5);
    } else if (left_distance > WALL_FOLLOW_DISTANCE && left_distance < WALL_THRESHOLD) {
      // Too far from the left wall, steer slightly left
      turn_left(left_motor, right_motor, 0.5);
    } else if (right_distance < WALL_THRESHOLD) {
      // Avoid wall on the right by steering left
      turn_left(left_motor, right_motor, 0.5);
    } else {
      move_forward(left_motor, right_motor);  // Move forward if path is clear
    }
  }

  wb_robot_cleanup(); // Cleanup Webots API
  return 0;
}

// Function to initialize sensors
void initialize_sensors(WbDeviceTag* distance_sensors) {
  char sensor_name[5];
  for (int i = 0; i < NUM_PROXIMITY_SENSORS; i++) {
    sprintf(sensor_name, "ps%d", i);
    distance_sensors[i] = wb_robot_get_device(sensor_name);
    wb_distance_sensor_enable(distance_sensors[i], TIME_STEP);
  }
}

// Function to move the robot forward
void move_forward(WbDeviceTag left_motor, WbDeviceTag right_motor) {
  wb_motor_set_velocity(left_motor, SPEED);
  wb_motor_set_velocity(right_motor, SPEED);
}

// Function to turn the robot left (factor controls turn strength)
void turn_left(WbDeviceTag left_motor, WbDeviceTag right_motor, double factor) {
  wb_motor_set_velocity(left_motor, SPEED * (1.0 - factor));
  wb_motor_set_velocity(right_motor, SPEED);
}

// Function to turn the robot right (factor controls turn strength)
void turn_right(WbDeviceTag left_motor, WbDeviceTag right_motor, double factor) {
  wb_motor_set_velocity(left_motor, SPEED);
  wb_motor_set_velocity(right_motor, SPEED * (1.0 - factor));
}
